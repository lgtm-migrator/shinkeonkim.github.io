// The Round Table
digraph {
	rankdir=LR
	var [label="변수"]
	input [label="입력(cin)"]
	output [label="출력문(cout)"]
	operator [label="연산자(+,-,*,/ 등등)"]
	escape [label="이스케이프 문자란"]
	loop [label="반복문이란"]
	for [label="for문이란"]
	for_1d [label="for문(1차원))"]
	for_2d [label="for문(2차원)"]
	while [label="while문이란"]
	while_1d [label="while문(1차원)"]
	while_2d [label="while문(2차원)"]
	if_1 [label="조건문이란"]
	if_2 [label="조건문 if"]
	array [label="배열이란"]
	array_1d [label="1차원 배열"]
	array_2d [label="2차원 배열"]
	loop_2 [label="반복문 제어"]
	break [label="break문"]
	continue [label="continue문"]
	sort [label="정렬이란"]
	bubble_sort [label="버블 정렬"]
	data_structure [label="자료 구조란"]
	linear [label="선형 자료구조"]
	Nonlinear [label="비선형 자료구조"]
	tree [label="트리란"]
	"graph" [label="그래프란"]
	binary_tree [label="이진 트리"]
	segment_tree [label="세그먼트 트리"]
	"Mo's Algorithm" [label="평방 분할 알고리즘"]
	function [label="함수란"]
	recursion [label="재귀함수"]
	fibonacci [label="재귀함수를 이용한
피보나치 수열"]
	hanoi [label="재귀함수를
이용한 하노이탑"]
	gcd [label="재귀함수를 이용해
최대 공약수 구하기"]
	data_type [label="자료형"]
	quick_sort [label="퀵 정렬"]
	"std::sort" [label="std::sort 활용"]
	structure [label="구조체란"]
	structure_sort [label="구조체 정렬"]
	output -> var
	var -> input
	var -> operator
	var -> data_type
	output -> escape
	loop -> for
	for -> for_1d
	for_1d -> for_2d
	loop -> while
	while -> while_1d
	while_1d -> while_2d
	input -> if_1
	output -> if_1
	if_1 -> if_2
	array -> array_1d
	array_1d -> array_2d
	loop -> array
	for -> loop_2
	while -> loop_2
	loop_2 -> break
	loop_2 -> continue
	if_2 -> loop
	sort -> bubble_sort
	data_structure -> linear
	data_structure -> Nonlinear
	Nonlinear -> tree
	Nonlinear -> "graph"
	tree -> binary_tree
	tree -> segment_tree
	tree -> "Mo's Algorithm"
	loop -> function
	function -> recursion
	recursion -> fibonacci
	recursion -> hanoi
	recursion -> gcd
}

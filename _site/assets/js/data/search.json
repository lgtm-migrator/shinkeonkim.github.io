[
  
  {
    "title": "Good Bye 2019, Hello 2020!",
    "url": "/posts/goodbye-2019/",
    "categories": "myStory",
    "tags": "kmu, 회고, 새내기, 19학번",
    "date": "2020-01-01 00:00:00 +0900",
    





    "snippet": "Good Bye 2019, Hello 2020!국민대 새내기의 뒤늦은 2019 회고벌써 2020년이지만, 2019년을 회상하며 회고를 남겨봅니다.2019년은 특히나 많은 일들이 있었던 것 같아 꼭 남겨보려고 합니다ㅎㅎ제 기억에 남은 큼지막한 일들을 적어보려합니다.첫 번째로 써보는 회고여서 부족한 내용이지만 제가 생각나는 대로 후회, 잘했던 것들을 적어보려 합니다..국민대학교 소프트웨어학부 입학 본인 방금 소프트웨어 특기자 되는 상상함 를 참고하면 될 것 같습니다.사실 저 post의 제목과 달리 저는 국민대학교 소프트웨어 특기자 전형으로 입학을 했고 특기자 전형이라는 이유로 장학금을 받으며 학교를 다니고 있습니다. (장학금 안 끊길려고 공부 또 공부한건 안 비밀)아무튼 저 post에 있는 내용처럼 국민대학교에 입학해서 여러 일을 겪고 여러 학문을 공부했습니다.국민대학교 두리톤(해커톤) 장려상저의 첫 해커톤이었습니다. @==(^^)@해커톤의 주제는 스트레스, 여행, 아이 중 택 1이었습니다.먼저, 기획자들이 자신들이 생각해온 주제를 발표하고 그 주제에 개발자들이 붙어서 하루동안 개발하는 순서로 진행되었습니다.제가 붙은 주제는 아이가 휴대폰을 하면서 횡단보도에서 신호등을 보지않고 건너는 경우를 방지하기 위해 휴대폰의 화면에 신호등 정보를 띄우게 하자! 정도로 요약할 수 있을 것 같습니다.해커톤 코드 깃헙 레포:  링크 아무튼, 첫번쨰 해커톤은 정말 새로웠고 좋은 경험이었습니다.하지만 정말 뼈저리게 저에게 새로운 교훈을 주기도 했습니다.저는 고등학교 때, C,C++,python을 단순히 PS(Problem Solving)를 하는 데만 활용했을 뿐더러 제가 가지고 있던 웹 개발 스택은 HTML,PHP,CSS 가 고작이었습니다.거의 조원들에게 얹혀간 기분이라 굉장히 마음이 힘들었습니다..ㅠㅠ이 해커톤을 발판으로 django, flask, node.js, vue.js를 공부하기 시작했고 현재진행형입니다ㅎㅎ그리고 정말 새벽을 새면서 코드를 짜는 게 생각보다 힘들었습니다.(지금은 뭐 이틀동안 안 자고 코드를 짜기도 합니다..)아래 사진처럼 다같이 커피, 에너지 음료를 마셔가면서 버텼지만 결국 다 전멸을 한 시간대도 있었습니다ㅠㅠ그래도, 우리 기획느님께서 좋은 아이디어를 들고 오고 조원들과 다 같이 기능 구현만을 최대한 구현한 결과 장려상을 수상할 수 있었습니다!첫 ACM-ICPC, 매우 매우 아쉬운 결과대학교 새내기의 2019 ACM-ICPC 후기 링크위의 링크를 참고해주시면 될 것 같습니다!요약하자면, 팀원과의 호흡을 맞추는 시간도 부족했고 나의 실수들이 너무나 크게 작용했다.그리고 전체적으로 문제를 풀 때, 분배를 잘못한 것 같다..(심지어 팀원도 다시 구해야 하는 상황이다..아이고야)학점.. 생각보다 괜찮네?국민대학교에 들어와서 학점에 대해 되게 많이 걱정했다.사실상 특기자를 준비하면서 정시, 수시 모두 준비해서 수학이나 영어에 자신감이 없던 건 아니었지만 다른 학우님들보다 못할까 걱정을 했다.하지만 생각보다 좋은 학점을 받게 되었고 더 열심히 하려고 노력을 했다.(시험 기간 아닐때도, 도서관에서 살았다…!)결국, 1학년 1학기와 1학년 2학기를 통틀어 50학점을 수강하였고 학점 4.4로 1년을 마무리하였다.하계/동계 인턴십, 알고리즘 컨텐츠 제작자위의 부분에서 1학년이 어떻게 50학점을 수강했는지 궁금하신 분이 있을 것이다. 바로 하계/동계 방학에 인턴십을 하였고 하고 있기 때문이다.프로그래머스라는 서비스를 운영하고 있는 그렙(GREPP)이라는 회사에서 알고리즘 컨텐츠 제작자라는 인턴으로 일을 했고 하는 중이다.1학년 1학기에 한번 넣어볼까 했던 이력서가 붙었고, 알고리즘 테스트를 봤는데 생각보다 높은 점수가 나왔고, 어느 순간에 인턴으로 일을 하고 있었다..(?!)인턴으로 일을 하면서 회사 생활을 겪는 것이 좋았고 (물론 돈도 최고..!) 여러 경험을 할 수 있어서 좋은 것 같았다.하지만, 요즘은 살짝 1학년 여름/겨울방학을 못 즐긴다는 생각도 들어 아쉽기도 하다..ㅜㅜ백준, solved.ac 서비스solved.ac라는 백준 온라인 저지 사이트의 문제들의 난이도/알고리즘을 나누고 사용자가 푼 문제의 경험치를 누적하여 랭킹을 나누는 서비스가 있습니다.이 서비스가 언제부터였는지는 잘 모르겠지만, 제가 처음 이 서비스를 발견했을 때는 아직 국민대학교가 화이트리스트에 없던 상황이었습니다.딱, 알고리즘 동아리에서 19학번 동기(형님)께서 화이트리스트 신청을 해주셨고 이 서비스를 이용할 수 있게 됬습니다.이 서비스를 처음 이용하기 시작했을 때는 Gold 티어였습니다.(Gold 몇 티어였는지는 기억이 안나네요.)뭔가 Platinum은 찍어야하지 않을까하면서 Platinum에 포함된 문제를 부리나케 풀기 시작했습니다.그때, 처음으로? 제대로 공부해보게 된 알고리즘이 세그먼트 트리, Mo’s Algorithm인 것 같습니다.현재는 Platinum5이지만 Platinum 4를 향해 달려가고 있습니다. 그리고 열심히 Platinum 1까지 가기를 새해 목표로 잡은 상황입니다.ㅎㅎ새해는 열심히 알고리즘을 공부해보려 합니다. 그래서 아래의 책들을 열심히 읽어보려 합니다!  알고리즘 문제해결전략(종만북), 구종만 지음   Introduction to algorithms, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest,Clifford Stein한아름 서비스, 만들었지만 개편이 필요해2018년 말부터 웹 사이트를 하나 만들기 시작했었다. 바로 본인이 졸업한 한민고등학교의 커뮤니티 사이트이다.한아름 사이트 링크(2020.01.02 기준 현재 사이트 서버가 죽은 상태다…으아)사실상, 초기 개발 당시 개발자 4명이서 기능 명세를 하면서 개발도 하면서 디자인도 하고 막막 되는대로 개발을 뛰어들어 엉망인 사이트이다.. 그래서 계속 개편을 하고자 했는데 아직까지도 이루어지지는 못하고 있다.그리고 어느 순간, 하나의 웹사이트로 시작한 이 한아름은 하나의 단체가 되었고 현재는 지금 20 명이 넘는 인원이 모여 여러 일을 분담하고 활동하고 있다.(언제나 고마워요! 한아름 여러분)현재 나는 한아름 웹사이트의 개편을 하기 위해 잠시 활동을 쉬고있긴 하다. (하지만 아무것도 하지 않는 건 아니다.)node.js나 vue.js, django를 활용해 코드 리팩토링을 하고 있다. 좀 더 유지보수를 하기 쉽도록 말이다.팀플이 너무 많아..국민대학교 1학년은 너무나 팀플이 많았다.. 넘나 힘든 것..소프트웨어 프로젝트 강의의 프로젝트들아예 강의명이 소프트웨어 프로젝트1, 소프트웨어 프로젝트2이였고 기말고사 기간마다 AD project라는 과제가 다가왔다.첫번째로 소프트웨어 프로젝트1은 간단한(?!) SNS 어플을 제작했다.우리 조의 아이디어는 편의점 SNS 어플을 만들어보자였고 편의점의 음식을 리뷰하고 피드에서 리뷰를 찾아보는 어플을 만들려했다.나는 PHP를 이용해 RESTFUL API와 DB를 구성하는 역할을 담당했고, 다른 팀원이 안드로이드 스튜디오를 이용해 어플을 제작하는 역할을 담당했다.생각보다 괜찮은 어플이 제작됬고 발표 또한 성공적으로 잘 한 것 같다..(아마?)두번쨰로 소프트웨어 프로젝트2는 python의 PYQT5를 이용해 만들어야 했기 때문에 PYQT를 활용한 음악 플레이어 Peachpitch를 개발하게 되었다.peachpitch 깃헙 레포:  링크 SRS, ADS, DDS 등의 문서를 작성하고 개발을 하는 것이 과제였지만 결국.. 선 개발 후 문서 작성을 해버리고 말았다.ㅠㅠㅠ원래는 문서를 작성하고 개발을 하는 것이 목표였지만첫째, 조원과 내가 PYQT5에 대해 아는 것이 전무함.둘쨰, 소스 코드 제작 기간(발표날까지 기간)이 촉박했음.위와 같은 이유때문에 개발을 하고 문서를 작성하게 되었다.아무튼 현재도 계속 이슈가 생기고 버그 fix를 해야 하는 프로그램이지만 구색을 잘 갖추어 만들어진 GUI 프로그램이 되었고 추후에 좀 더 수정을 해봐야 할 것 같다.Xycar와의 악몽2학기 수업 중, 자이트론의 Xycar b2를 활용한 두 강의가 있었다. 바로 창업연계공학설계입문과 유레카 프로젝트이다. 두 강의에 대한 자세한 이야기는 하지 않겠다. 하지만 이 2개의 강의에 엄청 엄청 상상 이상의 시간을 쏟았다.일단 국민대학교에는 소프트웨어학과 공간에는 자율 주행차를 구동할 수 있는 자율 주행 스튜디오가 존재한다. 이 공간에서 계속 돌릴 때마다 결과가 달라지는 Xycar를 붙들고 코딩을 한 기억만이 2학기에 남는 기억이 될 정도로 너무 많은 시간을 쏟았다.아무튼, 학기가 끝나면서 이 악몽에서 이제 탈출했다.2019년에 공부한 것 중 기억에 남는 것들  SQL          JOIN문 미워..        JS          JS 기본 문법      node.js (계속 하는 중이다..!)        Linear Algebra  JAVA  Python(언어 그 자체,flask, django 등등)  Xycar(임베디드 시스템 프로그래밍)  Algorithm          segment tree      Mo’s algorithm      KMP      Aho corasick      등등      마무리아무튼 말이 너무너무 길었다. 정리가 안 되는 문장도 있고 말이 이상한 문장도 있을 것이다. 2020년이 왔다는 것에 설렘이 가득 찬 동시에 2019년이 갔기 때문에 빠르게 2019년의 회고를 쓰고 싶었다.2020년은 이보다 더 좋은 결과, 일들이 있길 바란다.화이팅"
  },
  
  {
    "title": "[BOJ/백준] 2776 암기왕",
    "url": "/posts/boj-2776/",
    "categories": "acmicpc",
    "tags": "algorithm, BOJ, 백준, 백준 온라인 저지, BOJ 2776, PS, CP",
    "date": "2019-12-19 00:00:00 +0900",
    





    "snippet": "2776 암기왕문제문제는 아래 링크에서 확인  문제 풀이문제의 난이도 자체는 쉽다. 따로 풀이랄 것도 없다.그냥 숫자가 이전에 있었는지만 확인하면 되는 로직이다.하지만 숫자의 범위가 int 범위이기 때문에 int 범위만큼 배열을 만들고 이전에 이 숫자가 있었는지 확인하는 check 배열을 만들기는 힘들다.그러면 어떻게 해야할까?바로 딕셔너리를 활용하는 것이다.하지만 그대로 딕셔너리를 사용하고 in 연산자를 사용한다면 시간 초과가 뜰것이다.왜냐하면 python에서 딕셔너리는  O(n) 연산이니까…그래서 나는 아래 코드와 같은 로직을 좋아한다.(PS할 때만 쓴다..ㅎㅎ)일부러 딕셔너리의 어떤 숫자에 접근하고 만약 이 숫자가 없었다면 이를 try-catch 문으로 잡아내는 것이다.이렇게 접근하게 되면 O(n)으로 이 숫자가 있는가를 검사하는 코드가 O(1)로 줄게 된다.암튼 나만의 사소한 python tip이다. 누군가에게 도움이 되길 바라며 남긴다.문제 코드pythonfor t in range(int(input())):    d = {}    input()    for i in list(map(int,input().split())):        d[i] = 1    input()    for i in list(map(int,input().split())):        try:            d[i] +=1        except:            print(0)        else:            print(1)오늘의 잡소리너무 오랜만에 글을 올리게 됬다. 시험기간이라고.. 학기 기간이라고.. 글을 안올렸더니너무 많고 많은 올릴만한 글들을 못올리게 됬다. 아쉽다. 이제 글도 좀 자주 올려보려 한다!"
  },
  
  {
    "title": "[BOJ/백준] 1328 고층 빌딩",
    "url": "/posts/boj-1328/",
    "categories": "acmicpc",
    "tags": "algorithm, BOJ, 백준, 백준 온라인 저지, BOJ 1328, PS, CP",
    "date": "2019-11-13 00:00:00 +0900",
    





    "snippet": "1328 고층 빌딩문제문제는 아래 링크에서 확인 BOJ 1328 고층빌딩 문제 풀이이 문제에서 사용되는 알고리즘은 다이나믹 프로그래밍이다.핵심 점화식은D[i][j][k] = (D[i-1][j][k-1] + D[i-1][j-1][k] + (i-2)*D[i-1][j][k]) %Mod이다.하나씩 뜯어서 보자.  D[i][j][k]의 의미D[i][j][k] = i개의 건물이 있을 때, 왼쪽에서 j개의 건물이 보이고 오른쪽에서 k개의 건물이 보이는 경우의 수  D[i-1][j][k-1]를 더하는 이유i-1개의 건물이 있을 때, j개의 건물이 왼쪽에서 보이고 오른쪽에서 봤을 때, k-1개의 건물이 보이는 상황을 상상해봅시다.이때, i-1개의 건물들보다 작은 어떤 한 건물이 맨 오른쪽에 추가됬다고 합시다.그러면 왼쪽에서 볼 때는 어차피 안보이기 때문에 j개 그대로 보입니다.반면에 오른쪽에서 볼 때는 제일 작은 i번째 건물이 새로 추가되어 보이기 때문에 k개의 건물이 보이게 됩니다.따라서, D[i-1][j][k-1]은 D[i][j][k]에 포함됩니다.  D[i-1][j-1][k]위와 비슷합니다.이번엔 오른쪽이 아닌 왼쪽에 제일 작은 건물 하나가 추가된다고 생각하면 됩니다.  (i-2) * D[i-1][j][k]위의 2가지 경우로 제일 작은 i번째 건물이 맨 왼쪽, 오른쪽에 추가되는 경우가 나왔습니다.그러면 당연히 이제 중간에 추가되는 경우입니다.i-2는 추가될 수 있는 위치의 개수입니다.(i-1개의 건물이 있을 떄, i-2 곳에 건물을 배치할 수 있습니다.)그러면 이제 왜 건물을 중간에 위치하는데 D[i-1][j][k]를 곱하느냐만 알면 됩니다.한번 제일 작은 건물을 추가한다는 것에 집중해봅시다.제일 작은 건물을 기존 건물들 사이에 집어넣은다고 생각하면,어차피 제일 작은 건물은 기존 건물들에 가려져 안보입니다.따라서, 제일 작은 건물을 추가해도 당연히 왼쪽, 오른쪽에서 보이는 건물의 개수가 변하지 않기 때문에 (i-2)에 D[i-1][k][k]를 곱하면 된다는 얘기가 됩니다.문제 코드pythonD = [[[0]*110 for i in range(110)] for j in range(110)]N,L,R = map(int,input().split())D[1][1][1] = 1Mod = 1000000007for i in range(2,N+1):    for j in range(1,L+1):        for k in range(1,R+1):            D[i][j][k] = (D[i-1][j][k-1] + D[i-1][j-1][k] + (i-2)*D[i-1][j][k]) %Modprint(D[N][L][R])오늘의 잡소리처음에 이 문제를 봤을 때, 이걸 어떻게 풀지라는 생각을 했고 고민을 좀 많이 했습니다.살짝의 힌트를 얻으려고 다른 분들의 풀이를 살짝만 보자하고 봤었습니다.문제는 풀이가 되게 짧았고 그게 바로 핵심이었고 강렬한 스포를 당해 문제를 푸는 것이 싱겁게 되었습니다..ㅋㅋㅋ"
  },
  
  {
    "title": "대학교 새내기의 2019 ACM-ICPC 후기",
    "url": "/posts/acmicpc-2019/",
    "categories": "acmicpc",
    "tags": "algorithm, acmicpc, ACM-ICPC, 대학생 알고리즘 대회",
    "date": "2019-10-06 00:00:00 +0900",
    





    "snippet": "첫 ACM ICPC 후기너무나 미숙했고 부족했다.팀원과의 호흡을 맞추는 시간도 부족했고, team note도 제대로 준비하지 못했다..그리고 대회를 시작한 직후, DomJudge 서버의 과부화가 왔는데 이때 I. Registeration을 제출하는 과정에서내가 계속 새로고침을 눌렀는데 이게 오히려 제출을 늦게 되게 만들었던 것 같다..ㅠㅠ최종 스코어보드(in 국민대학교)우리 팀명은 1ggondae2zzolbo 였다.팀원끼리 회의를 하다가 1명의 선배와 2명의 새내기가 있어서 이런 팀명을 하자고 얘기가 나왔고 그대로 이름을 짓게 되었다.최종 스코어보드를 보고 든 생각국민대학교에서는 3학년 전공 수업인 알고리즘에서 ACMICPC 대회를 나가게 한다. 그래서 그런지 내 전공 수업 때 계시는 조교님, 잘 아는 선배들이 대회장에 되게 많이 계셨다. 그 와중에도 중간 스코어보드가 fix된 상황에서 우리 팀이 3등이었던건 선전했다고 생각했고 최종 순위가 5등인게 아쉽긴 하지만 내년엔 다를 것이다.(이제 감 잡았다.)푼 문제 풀이,못 푼 문제의 접근 방법푼 문제가 많지 않다..ㅠㅠ일단 쭉 적어본다. 순서는 내 마음대로다.I. RegisterationDom Judge의 아이디와 비밀번호를 출력하면 된다.제작년, 작년 ACMICPC 후기들을 읽고미리 팀노트에 적어가서 바로 하였다.H. Four Squares50000까지의 제곱수는 아마 232개쯤 된다고 계산이 되었고 DP 배열에 i를 구성하는 제곱수의 최소 개수를 저장하는 방식으로 해결했다.시간 복잡도 : O(n*(sqrt(n)))C Byte Coin개인적으로 이 문제가 제일 아쉬운 문제이다.Dom Judge의 상태만 좋았다면 제대로 풀 수 있었을 것 같다.먼저, 내가 그냥 이거 브루트 포스로 다하면 되지 않냐고 했고 코드를 구현해서 제출했지만 TLE..그래서 미적분의 극대,극소 부분 그 점일때 사고 파는 식의 구현을 했지만 일부 예외 테케를 대회가 끝나고 알게 되었다.(심지어 이 코드가 틀렸다는 것을 대회 서버의 채점이 늦어져 대회가 끝나고 알게 되었다.)D. Cancal뭔가 그냥 하면 풀릴 것 같은 문제였지만 이문제를 해석하고 풀이를 시작하게 된 시간이 너무 늦어서 풀기 힘들었고 어떻게 할까 생각하다가 끝났다..B. Balanced String이 문제는 처음에 선배가 해석을 하였고 내가 설명을 들었다. 근데 나는 보자마자 바로 DP라고 생각을 했도 너무나도 잘 들어맞았다. 바로 종이에 DP식을 쓴 뒤, 선배에게 구현을 맡기고 다른 문제를 풀기 시작했다. 살짝 선배와 생각이 달랐는지 구현이 몇개 잘못되어있는 것을 나중에 보고 일부 고친 뒤, 제출해 AC 되었다.시간복잡도: O(n)F. Dryer이 문제는 처음부터 끝까지 내가 집착한 문제이다.풀 수 있을 것 같았다. k가 1부터 3이길래 쉽다고 생각했다. 하지만 k가 3일 때, 너무나 HELLPARTY가 생기는 걸 보고 다른 문제를 푸는 것에 더 집중했다..G. Enumeration솔직히 너무나 간단한 문제라 생각하고 접근했지만문제를 잘못 읽었었다. 아직도 이 문제의 정확한 의미와 풀이를 모르겠다..E. Choreography팀원 모두가 포기하고 넘긴 문제이다. 다들 미숙해서 이 문제의 해석부터 포기했다..(시간이 너무나 부족하다고 여겼다.)정리솔직히 너무나 아쉬운 대회 내용이었다.올해 겨울은 인턴을 하러 회사를 가지 말아야겠다는 생각이 들었다.. 겨울에는 좀 알고리즘 공부를 더 빡세게 하고 와야 본선을 가볼 수 있지 않을까..ㅜㅜ아, 만약 이 글을 국민대학교 분이 읽는다면 이거 하나 알려드립니다. 팀원 구합니다^^.(팀원이었던 선배가 대학원에 가십니다..)"
  },
  
  {
    "title": "본인 방금 소프트웨어 특기자되는 상상함.(2)",
    "url": "/posts/mentoring-02/",
    "categories": "class",
    "tags": "소프트웨어학과, SW, 소프트웨어 특기자, 학생부 종합",
    "date": "2019-09-15 00:00:00 +0900",
    





    "snippet": "프로그래밍을 해보고 싶다고요?먼저 기초 100제를 푸세요.codeup.kr에 올라와 있는 기초 100제로 시작해보세요. 링크언어는 C언어로 해봅시다.제가 기초 100제로 코딩을 시작해서인지는 모르겠지만 기초 100제가 정말 프로그래밍을 시작할 때, 해보면 좋은 문제들로 구성되어 있다고 생각합니다.oj 사이트 활용를 활용합시다.진짜 oj 사이트는 너무 많고 많습니다.(사실 저도 oj 사이트 만들 생각이지만 너무나 oj 사이트 만들기 어렵네요…ㅜㅜ) 제가 알고있는 oj 사이트들입니다.  https://codeup.kr/index.php  https://programmers.co.kr/  http://koistudy.net/  https://www.acmicpc.net/ (soved.ac 를 같이활용하는 것을 추천드립니다만..화이트리스트 목로겡 포함되셔야 합니다..ㅜㅜ)  http://hmcoder.kr:8080/ (한민고 OJ입니다.)  http://www.jungol.co.kr/  http://codingfun.net/onlinejudge/  https://leetcode.com/이건 추가로 온라인 알고리즘 대회가 열리는 사이트 목록입니다.  https://codeforces.com/  https://www.sundaycoding.xyz/  https://arena.topcoder.com/#/u/dashboard  https://www.hackerrank.com/contests  https://www.oncoder.com고등학교 알고리즘 대회 및 프로그래밍 대회뒤늦게 알고리즘에 고여가는 사람의 팁고등학교 알고리즘 대회의 요즘 메타는 빡센 내용을 구현하거나 수학 실력이 뛰어나야 풀 수 있는 문제보다는학생이 정말 이 문제에 대해서 깊은 생각을 하고 문제를 해결할 수 있는가를 보는 것 같습니다.따라서, 평소에 알고리즘 문제를 풀어볼 때, 앞선 글에서 말했듯이 끝없이 질문하는 습관을 가지시는게 좋을 것 같습니다.그래도 일단 진짜진짜 적어도 아래에 있는 알고리즘들은 공부해보시는 걸 추천합니다.  counting sort  quick sort  Dynamic Programming (복잡한 것 까지는 아니어도 개념이라도..)  이분 탐색  DFS / BFS (이거는 진짜 능숙하게 다루셔야 합니다.)  Greedy Algorithm (탐욕 알고리즘, 탐욕적이다는 게 뭔지에 대해서 알고 있는게 좋습니다.)  최단 거리 알고리즘  최소 신장 트리 (Minimum spanning Tree)  에라토스테네스의 채  비트마스크이 알고리즘들은 시간이 되거나 좀 더 어려운 걸 풀어보고 싶으시다면 도전해보세요.  LIS (O(n^2) 방식과 O(nlogn) 방식 2가지 모두)  볼록 껍질  네트워크 플로우  이분 매칭  세그먼트 트리  평방분할 알고리즘  Disjoint-Set  우선순위큐를 활용한 다익스트라 알고리즘  냅색  CCW  CC(Coin change)  세그먼트 트리 with Lazy Propagation  단절점(AP)  LCA추천하는 커리큘럼(계속 수정 될 예정입니다.)아래의 그래프는 C++ 기준으로 작성되었습니다.(ACM-ICPC, 정보올림피아드 등등의 대회에서 주로 C++로 문제를 해결하기 떄문입니다.)   "
  },
  
  {
    "title": "본인 방금 소프트웨어 특기자되는 상상함.",
    "url": "/posts/mentoring-01/",
    "categories": "class",
    "tags": "소프트웨어학과, SW, 소프트웨어 특기자, 학생부 종합",
    "date": "2019-09-15 00:00:00 +0900",
    





    "snippet": "서론미리 말씀드립니다.이 글은 09.27일에 진행되는한민고등학교 X 한아름 멘토링에서 사용되는 자료이며필자의 주관적인 생각이 매우 많이 담겨 있는 글입니다.따라서, 아 이런 idea와 생각을 하는 사람이 있다고 생각해주시고무조건 받아들이지는 마시기 바랍니다.소개국민대학교 소프트웨어학부 김신건  2016.03 한민고등학교 입학  2017 한민 학술제(발표 부문) 금상(1위)  2017 한민 학술제(발표 부문) 은상(2위)  2017 제 5회 한국로보컵오픈대회 Soccer Light Weight 부문2위  2017 Robocup 机器人世界杯中国赛华南公开赛 三等奖  2017 제 1회 한국로보컵코딩대회 RescueLine Secondary 부분 Best Research Award  2018 ICT 어워드코리아 이산수학 고등부 장려상  2018 제 3회 국민대학교 알고리즘 대회 장려상  2019.01 한민고등학교 졸업(3기)  2019.02 국민대학교 입학(소프트웨어 특기자 전형)  2019 국민대학교 두리톤 장려상  2019.07.~  Grepp 알고리즘 컨텐츠 제작자 (인턴)  2019.09 ~ 구로고등학교 융합형 프로그래밍 강좌 강사목차1.소프트웨어 학과    1-1. 소프트웨어 학과는 뭐하는 학과인가요    1-2. SW학과, 단지 호기심만으로만 가도 되나요?    1-3. 특기자 전형        1-3-1. 자신에게 맞는 전형은 스스로 공부해보세요.        1-3-2. 특기자 전형        1-3-3. 저의 이야기 &amp;amp; 특기자 전형 준비2. 프로그래밍을 해보고 싶다고요?    2-1. 기초 100제를 푸세요.    2-2. oj 사이트 활용방법3. 고등학교 알고리즘 대회 및 프로그래밍 대회    3-1. 뒤늦게 알고리즘에 고여가는 사람의 팁    3-2. 추천하는 커리큘럼소프트웨어 학과소프트웨어 학과는 뭐하는 학과인가요?  국민대학교 커리큘럼  국민대학교 SW 사이트 대학교마다 다르겠지만 주로 1,2학년 때는 기초적인 프로그래밍 언어, 알고리즘, 자료 구조 등의 기초 지식을 쌓습니다. 그리고 3,4학년 때는 프로젝트 진행 또는 쌓아둔 기초 지식을 원없이 발휘할 수 있는 심화적인 내용을 다룹니다.국민대학교의 경우, 1,2학년때는 기초적인 내용들을 배우고 3,4학년 때는 자신이 선택한 트랙에 따라 심화 내용을 공부합니다.1. 논리적인 사고와 문제 해결 능력, 설계 능력들을 기른 뒤, 이를 프로그래밍으로 해결하는 방법을 배웁니다.2. 소프트웨어 학과는 컴퓨터를 고치는 학과도, 컴퓨터 사양을 맞추는 학과도, 엑셀-파워포인트 등을 배우는 학과도 아닙니다.3. &quot;소프트웨어 학과가면 게임같은 거 만드는 거 아냐?&quot; 라는 말은 맞지만 게임&#39;만&#39; 만드는 게 아닙니다. 인공지능, IOT, 게임, 미디어, 임베디드 등등 많은 것을 배우고 실습합니다.SW학과, 단지 호기심으로만 가도 되나요?솔직히, 단지 호기심만으로 접근하기에는 어려운 학과이지 않을까 생각합니다.실제로, 제 친구들 중에 SW 학과에 들어와서 코딩을 접하는 친구들도 있습니다.하지만 처음에 프로그래밍의 프자도 모르는 자신을 보며 회의감을 가지기도 하고 학과 공부를 포기하기도 합니다.그래서 저는 아직 고등학생인 여러분에게 한번이라도 프로그래밍 언어라든지, 논리적인 사고를 하는 방법등을 한번씩 공부해보길 바랍니다.여기까지 설명을 하다보면 이런식으로 나뉘게 됩니다.프로그래밍 언어 공부하는 것도 재밌고, 논리적으로 생각하는 것도 좋아!꼭 SW학과 오셔서 자신의 기량을 펼쳐 주세요.난 프로그래밍 언어 같은 건 모르겠고 뭔가 논리적으로 생각하는 게 좋은데?프로그래밍 언어를 하나만 공부해보면서 자신의 생각을 표현해보세요. 어느 순간 빠져 있을 겁니다.난 둘 다 하기 힘들 것 같은 데, SW 학과는 가고 싶어.SW 학과를 오시고 싶으시다면 언젠가 겪어야 할 일입니다. 화이팅..!ㅠㅠ…아무튼 결론을 내려보겠습니다.SW학과에 단순 호기심을 오기보다는 자신의 흥미, 능력, 사고 등등 여러가지를 고려해보세요.그리고 한번 프로그래밍 언어, 알고리즘 등등도 공부해보면서 자신에게 맞는지 확인해보세요.모든 것을 고려해보고 괜찮을 것 같다면 SW학과, 무조건, 꼭, 오시길 바랍니다.특기자 전형자신에게 맞는 전형은 스스로 공부해보세요.제목이 너무 직설적일 수도 있습니다.하지만 이는 너무나 저에게는 뇌리에 박혀있는 생각입니다.사람마다 가지고 있는 생각, 능력, 스펙, 성적, 상장의 종류, 상장의 수, 학생부의 내용, 내신 뭐 다 다를 수 밖에 없고 자신이 바라보고 있는 대학 또한 다 다릅니다. 근데 &quot;이전에 이런 사람이 이렇게 갔다더라&quot;, &quot;이렇게만 하면 어디 대학 갈 수 있어&quot; 와 같은 선배 혹은 부모님, 선생님의 말만 듣고 자신의 생각없이 자신의 미래를 정할 건가요?직접 가고 싶은 대학교 목록을 정하고 대학교 입학처 사이트 들어가서 입학 전형 목록, 선례, 이전 입학 성적 등등 다 찾아가면서 입학 전형 한번씩 정리해보세요. 그렇게 하다보면 자신에게 맞는 대학교, 목표가 정해지고 그걸 향해 달려가면 됩니다.특기자 전형소프트웨어 특기자 전형, 참 말이 많은 전형입니다..SW 특기자 전형을 꿈꾸는 학우 여러분들을 위하여 (이 분의 글을 보고 저의 생각을 좀더 첨가해봤습니다.)특기자 전형은 학종의 미묘한 연장선입니다.특기자 전형은 참 애매합니다. 어떤 대학교는 학생부 종합과 거의 똑같고, 어떤 곳은 완전 다르게 진행되기도 합니다. 예를 들어, 제가 입학한 국민대학교의 소프트웨어 특기자(2019입학기준)의 경우, 1차 전형이 교외 상장 1개로 결정되고 2차 전형의 경우 면접의 비율이 압도적으로 높았습니다.이렇게 학종과 관련없이 진행되는 학교도 있고 학종과 거의 똑깥이 진행되는 학교가 있기 때문에 미묘하다라는 말을 하게 되었습니다.따라서 앞서 말했듯이 자신에게 맞는 전형을 찾다보면 특기자 전형을 넣을만 한 곳이 있고, 특기자 전형으로 넣으면 안되는 곳이 있습니다.(계속 반복해서 말하게 되는 것 같네요.) 그래서 스스로 전형을 공부하고 자신에게 맞는 전형이 특기자 전형이라고 생각하신다면 차근 차근 준비하시면 될 것 같습니다.저의 이야기 &amp;amp; 특기자 전형 준비저는 SW특기자 전형(대학마다 이름이 조금씩 다르지만 통일해서 말하겠습니다.)으로 4개 학교에 지원했습니다.(나머지 2장은 학종이었습니다.)1. 성균관대학교2. 한양대학교3. 경희대학교4. 국민대학교다른 학교들은 확신이 없었지만 국민대학교는 확신을 가지고 지원을 한 것 같습니다. (제가 지금 국민대학교에 있어서 그렇게 기억이 왜곡된 걸 수 도 있습니다..ㅋㅋ)그 이유는 위에서 말했듯이 국민대학교의 입학전형이 저한테 매우 유리했기 때문입니다. 저는 2018년 국민대학교 알고리즘 대회에서 장려상을 받은 상태였고 이 상은 국민대학교 입학 전형에 매애애애애우우우 크게 반영되는 상이었습니다.일단 그렇게 원서를 다 작성하고 수능을 봤습니다.수능 80일 전까지 프로그래밍에 빠져있었던지라 수능 점수를 기대는 하지 않았습니다. 그래도 6월 모평 때, 수학을 4등급을 맞으니 멘탈이 나갔습니다. 그리고 다시 모의고사, 수능 공부를 하기 시작했고 수능에서는 수학을 89점 맞았고 다른 과목들도 다 괜찮게 받은 것 같았습니다.하지만 역시나 역대급으로 HELL을 보여준 국어가 저의 발목을 붙잡았고 정시 원서를 쓸 미련을 바로 버리게 만들었습니다.그렇게 이틀 뒤, 국민대학교 특기자 면접을 보게 됩니다.(수능 이틀전에 1차 합격을 본 상태였습니다.)특기자 면접에서는 제가 준비해간 포트폴리오 위주의 면접이었고 여러 질문들을 받았습니다.(면접 후기를 적어논 한글 파일 또는 프린트 참고해주세요!!)딱 이 면접에서 붙은 것을 확신한 것은 여러 말 중 &quot;국민대학교 와서 이거 연구해봐요&quot; 와 &quot;학원 다닌적 있어요?&quot; 였습니다. 그 당시에 확신한 이유는 저는 학원을 다닌 적도 없으며 스스로 공부했었고 제가 하고자 하는 연구 내용을 들으시고 너무나 흐뭇하게 보고 계셔서 인 것 같습니다.면접이 끝나고 나서 몇 일동안, 다른 대학들의 불합격 통보를 수없이 보게 되었고.. 몇 일 뒤, 국민대학교 특기자 최초합을 받고 국민대학교에 입학하게 되었습니다.이제 제가 직접 특기자 전형을 경험하고 준비하면서 했던 내용을 바탕으로 준비하는 과정을 정리해보겠습니다!!1. 내신 버리지 말자내신이 심각하게 중요한 전형이 아니더라도 챙겨야 합니다. 내신이 엄청 하위권인데 특기자 전형을 붙은 case는 이미 정보과학에서 ‘괴물’, ‘괴수’ 라고 불리는 사람들입니다. 스스로 자신이 괴물, 괴수가 될 자신이 있으시다면 제 말 듣지 않으셔도 될 것 같습니다.(괴물이 된다는 것은 정올, 각종 알고리즘 대회에서 끊이지 않고 상을 타고, codeforeces나 boj같은 알고리즘 사이트의 탑을 먹는 것입니다.)2. 자신이 공부한 내용을 정리하세요.자신이 알고리즘이든 수학이든 배운 내용에 대해서 github 블로그, 티스토리, 네이버 블로그 등등 아무데나 일단 정리하는 습관을 가지시길 바랍니다.언젠가는 쓸 일이 무조건 있을 겁니다.  학생부 기록할 때  특기자 포트폴리오 작성  대회 준비 등등3. 알고리즘에 끝없이 질문해보세요.어떤 알고리즘을 공부한다면 계속 스스로 질문을 해보세요. “만약 이런 상황이라면 어떻게 해야되지?” 예를 들어, N개의 숫자가 나열되어 있을 때, N개의 숫자를 합하는 문제를 풀었다고 생각합시다. 아래와 같이 이런 여러 가지의 질문을 할 수 있습니다.“만약에 N개의 숫자 중에 일부 숫자만 더한 값을 구하려 할 때, 어떻게 하면 빨리 구할 수 있을까?”“만약에 일부 숫자들이 변할 수 있는 상황에서 N개의 숫자의 합을 어떻게 하면 쉽게 구할 수 있을까?”“만약에 일부 숫자들이 변할 수 있는 상황에서 K개의 숫자의 합을 여러번 구하려면 어떻게 해야 할까?”…4. 알고리즘 대회를 나갔다고요? 정리하세요.저도 잘 지키지 못했던 내용이지만 정말정말 필요한 것입니다. 알고리즘 대회를 나간 뒤에는 자신이 푼 문제와 못 푼 문제에 대해서 정리하세요. 만약 못 푼 문제를 계속 모르고 지낸다면 영원히 그 문제는 못 푸는 문제가 되는 것입니다. 아는 문제였더라도 내가 어떤 알고리즘, 생각으로 문제를 풀었는지를 정리해야 합니다. (대회에서 즉석에서 떠오른 아이디어가 정말 맞는건지 점검하는 것도 실력을 늘리기에 정말 좋은 것입니다.)5.소논문 한번 써보실래요?한번이라도 자신이 불편함을 느낀 부분이 있다면이를 해결하려는 프로그램이나 알고리즘을 구상해서 소논문을 작성해보세요. 정말정말 소중한 경험이 되고 나중에 써먹기 좋은 포트폴리오가 됩니다.6. 친구들과 프로젝트를 진행해보세요.뜻이 맞는 친구가 있거나 다른 분야를 꿈꾸는 친구라도 분업을 한 뒤, 프로젝트를 진행해보세요. 다 같이 한다는 생각때문에 포기를 하지 않고 열심히 할 수 있게 될 뿐만 아니라 자신의 실력도 금방 늘 수 있는 길이었던 것 같습니다.7. 정말 자신이 알고있는 내용만 포트폴리오에 포함시키세요.가끔 자신이 알고있는 내용이 아닌데 일단 포트폴리오, 자소서, 생기부에 포함시키는 친구들이 있습니다. 물론 운 좋게 넘어가는 경우도 있지만 그런 내용 하나하나 때문에 면접에서 큰코 다칠 수 있습니다. 만약 자신이 대충 알고 있거나 모르는 내용인데 포트폴리오에 포함된 경우, 면접관이 너무나 잘 알아챕니다. 괜히 양 늘릴려고 질을 낮추지 마세요.8. 특기자 전형은 고여있습니다.특기자 전형을 준비하기 위해 여러 알고리즘 대회를 다녀보면, 어디서 많이 본 이름들이 보입니다. 계속 같은 사람들끼리 경쟁한다는 얘기입니다. 정말 여러분이 알고리즘 대회 수상으로만 특기자 전형을 지원하고 싶으면 계속 만나게 되는 사람들과 경쟁해야 합니다. 설렁설렁 이정도 하면 되겠지하는 마음가짐은 안됩니다. 당신도 고인물이 될 각오하시길 바랍니다.(진짜 알고리즘 대회 수상만으로 특기자 전형을 준비하는 사람에 한해서 입니다.)9. 알고리즘과 자료구조 공부는 최대한 풀어서 생각하세요.만약 알고리즘과 자료구조를 들어보지 못했거나 잘 모른다면, 예를 들어드리겠습니다.배가 고파서 오므라이스를 먹으려 합니다.이때, 필요한건 오므라이스를 만드는 레시피, 재료, 조리기구등이 있겠죠?오므라이스를 만드는 레시피 =  알고리즘재료 = 어떤 input data조리기구 = 자료구조오므라이스를 만드는 데 프라이팬이라는 자료구조를 쓴다면 오므라이스를 만드는 알고리즘이 쉽게 작동하겠죠?만약 오므라이스를 만드는데 냄비라는 자료구조를 쓴다면 오므라이스를 만드는 알고리즘이 비교적 어렵게 작동하겠죠?이런 식으로, 어떤 명령들이 순서대로 주어지면 알고리즘, 알고리즘을 구현하기 위해 도와주는 무언가를 자료구조라고 이해하시면 될 것 같습니다.이제 본 얘기로 돌아와 보겠습니다.위의 예시처럼 알고리즘과 자료구조 공부는 최대한 자신에게 이해가 가는 방법으로 풀어서 공부해보세요.알고리즘과 자료구조는 그 어떤 코드를 말하는 것이 아닙니다. 알고리즘과 자료구조는 사람의 생각이고 idea입니다. 최대한 자신에게 맞는 idea를 찾아보세요. 그럼 자연스럽게 코드가 따라오게 됩니다.긴 글 읽어주셔서, 긴 말 들어주셔서 감사합니다.다음 내용은 다음 post에 올리도록 하겠습니다!"
  },
  
  {
    "title": "PS를 하면서 사용하는 python input() 방식",
    "url": "/posts/python-input/",
    "categories": "class",
    "tags": "python",
    "date": "2019-09-08 00:00:00 +0900",
    





    "snippet": "python의 input()은 문자열이야!python에서 input()을 사용할 떄 다음과 같이 이해하면 편하다.input()에 사용자가 입력하는 내용이 문자열로 대치된다.이해가 안될 수 있으니 예시를 들어보자.a = input()print(a)위와 같은 코드가 있을 때, 사용자가 Hello라는 문자열을 입력했다고 생각해보자. 그러면 아래 코드와 같이 바꾸어 생각해볼 수 있다.a = &quot;Hello&quot;print(a)말 그대로 input()의 위치에 사용자가 입력한 문자열이 들어가는 것이다. 그러면 한번 5를 입력하고 2를 곱한 값을 출력해보자.a = input()print(a*2)만약, 위의 코드에 입력을 5라 했을 때, 10이라는 답이 출력되길 바랬다면 아직 python의 input()을 완벽히 이해하지 못한 상황이다.python의 input()은 문자열로 생각해야 한다.따라서 위의 코드는 55라는 문자열이 출력됬을 것이다. 그렇다면 10이 출력되게 할려면 어떻게 해야 할까.a = input()a = int(a)print(a*2)이렇게 문자열을 int() 함수를 이용해 정수로 바꾼 뒤, 2를 곱한 다면 10이 출력될 것이다.이 정도 내용을 모두 이해했다면 input()의 방식을 어느 정도 이해했을 것이다. 다음으로 넘어가보자.PS문제에서 주로 입력이 들어오는 방식숫자 한 개a = int(input())두 줄에 걸쳐 숫자 2개a = int(input())b = int(input())한 줄에 걸쳐 숫자 2개a,b = map(int,input().split())한 줄에 걸쳐 N개의 숫자L = list(map(int,input().split()))한 리스트에 담아 인덱스로 접근하는 것이 더 편하지만, 인덱스에 따라 무슨 정보가 담기는 지 잘 기억해야 한다.특수 기호로 구분된 N개의 숫자L = list(map(int,input().split(&quot;특수기호&quot;)))문자열 1개a = input()공백이 포함됬든 안 포함됬든 상관없이 개행문자 기준으로 한 줄 모두 입력된다.문자열 2개a,b = input().split()문자열 N개L = list(map(int,input().split()))실수 1개a = float(input())사실, 필자는 부동소수점 오류때문에 float으로 변환하기보다 input() 문자열 그 자체로 계산을 한 뒤, 직접 소숫점을 출력하는 방식을 더 많이 사용한다.실수 2개a,b = map(float,input().split())일단 여러 부류로 나누어 설명을 해보았다. 더 많은 내용을 정리해 조금씩 더 정리를 해보겠다.2019.09.08) 일단 정수, 문자열, 실수에서 나올 수 있는 예시 정도를 정리해보았다."
  },
  
  {
    "title": "python 출력",
    "url": "/posts/python02/",
    "categories": "class",
    "tags": "python",
    "date": "2019-08-28 00:00:00 +0900",
    





    "snippet": "python 출력파이썬에서 출력을 하는 방법은 너무나 간단합니다.바로 print() 함수를 사용하는 것입니다.물론 다른 명령어가 있긴 하지만 print()를 주로 사용합니다!바로 아래 명령어를 실행시켜봅시다.(Python IDLE 이든, Python 3.X 이든, 개인 IDE이든 상관없이 일단 실행해봅시다!)print(&quot;Hello World!&quot;)뭔가 print() 에서 () 괄호 안의 내용을 출력하는 것 같죠?이번엔 아래 명령어도 실행시켜볼까요?print(1+1)어? 이번엔 1+1을 그대로 출력하는게 아니라 1+1의 결과인 2를 출력하네요한번 그러면 실수도 계산해볼까요?print(3.14+3.14)3.14+3.14의 답인 6.28을 출력해주네요.이번엔 복소수도 계산해볼까요?(python에서는 허수i를 j로 표기한답니다.)print((3+4j)+(5+7j))위의 코드를 실행시키면서 우리는 자연스럽게 파이썬의 print, 문자열, 정수, 실수, 복소수를 경험해볼 수 있었습니다. 한번 정리해봅시다.정리  print() 함수는 괄호 안의 무언가르 출력해주는 역할을 합니다.  “Hello World!”와 같이 “내용” , ‘내용’ 처럼 따옴표로 둘러싸인 것은 문자열이라 합니다.  print(1+1)을 했을 때, 2가 출력된 이유는 1+1이 문자열이 아닌 정수 연산이었기 때문입니다. 따라서 print(“1+1”) 을 해보면 1+1로 출력이 됩니다!"
  },
  
  {
    "title": "알고리즘 공부를 하는데 왜 자료가 없니..",
    "url": "/posts/thinking/",
    "categories": "thinking",
    "tags": "algorithm",
    "date": "2019-08-22 00:00:00 +0900",
    





    "snippet": "계기이 글은 단지 내 사소한 하소연이다.최근에 BOJ (www.acmicpc.net) 사이트의 문제를 풀고여러 알고리즘을 접하게 되었다. 아래는 최근에 내가 접하거나 다시 공부한 알고리즘이다.  Segment Tree  Segment Tree with Lazy Propagation  Mo’s Algorithm  sqrt decomposition  Bipartite Matching  Network Flow  etc..근데 공부하는데 진짜 애먹은 것 같다.하소연알고리즘 공부를 하는데 좀 더 심화적이고 더 재밌는 내용들은 한글자료가 적을까라는 생각이 너무나 많이 들었다. 자료가 없다는 것이 아니다. 여러 사람이 다루지 않는다는 것이다. 알고리즘이라는건 사람의 생각을 담아논 것이다. 나는 알고리즘은 자고로 여러 사람의 생각과 설명을 봐야 좀더 좋은 이해를 할 수 있다고 생각한다.뭔가 이상한 결론아무튼 이렇게 된 김에 영어자료든 한글자료든 모으고 공부해서 직접 자료를 만들어볼 생각이다. 실력이 뛰어나지 않아도 한 사람의 생각이라도 정리가 더 된다면 점차 여러 사람이 나처럼 나서지 않을까라는 생각이 들었기 떄문이다."
  },
  
  {
    "title": "python tutorial",
    "url": "/posts/python01/",
    "categories": "class",
    "tags": "python",
    "date": "2019-08-22 00:00:00 +0900",
    





    "snippet": "프로그래밍파이썬(Python)위의 로고는 현재 여러 분야에 사용되는 프로그래밍 언어, 파이썬의 로고입니다.파이썬은 1991년, 귀도 반 로썸(위의 인물 사진) 발표한 언어입니다.파이썬을 사용하는 이유단순함  문법이 단순합니다.효율성  코드가 단순해 파이썬 코드를 작성하는 코드의 속도가 빨라 효율적입니다.배우기 쉬움  프로그래밍을 처음 접하는 사람도 쉽게 배울 수 있는 언어입니다.가독성  다른 언어와 비교할 때, 코드를 이해하는게 더 수월합니다.확장성  여러 분야에 사용됩니다. 게임, 인공지능, 통계, 수학, 자연과학파이썬 설치 파이썬 설치 링크설치순서는 다음과 같습니다.1) 아래 체크박스 2개를 다 체크해주시고 Install Now를 눌러주시면됩니다.2) 설치 진행하시면 됩니다.아나콘다 설치아나콘다 설치 링크 컴퓨터의 OS에 맞추어 설치해주시면 됩니다. (python 3.X.X 로 설치해주셔야 합니다.)설치 순서는 다음과 같습니다.1) Next2) Agree3) Just Me 선택4) 기본으로 뜨는 경로로 해주시면 됩니다. Next5) 아래의 체크박스만 체크하고 넘겨주세요.6) 설치중 화면7) 설치 완료아래 사진과 같이 뜨면 설치된 것입니다.간단한 python 실습간단하게 python 실습을 해보겠습니다.아래의 사진과 같이 있을떄, python 3.7을 실행시켜봅시다.아래와 같이 한 검은 창이 뜹니다.한번 1+1을 python으로 계산해봅시다.답이 2라고 나옵니다.이번엔 11111111111111111 x 1231231231261231321가 뭔지 계산해봅시다.답이 13680347014013681207640974304307631라고 나옵니다.이번엔 Hello World를 python으로 출력해봅시다.다음 시간부터 python에 대해 더 자세히 다루어보겠습니다."
  },
  
  {
    "title": "Hello World",
    "url": "/posts/first-post/",
    "categories": "etc",
    "tags": "github",
    "date": "2019-06-27 00:00:00 +0900",
    





    "snippet": "Hello World!Hello GitHub Blog"
  }
  
]

